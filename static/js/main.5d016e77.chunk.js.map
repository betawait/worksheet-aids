{"version":3,"sources":["utils/SentenceScramblerUtil.js","components/ScramblerOptions.js","components/SentenceScrambler.js","App.js","registerServiceWorker.js","index.js"],"names":["SentenceScramblerUtil","_ref","arguments","length","undefined","_ref$aScramblerFuncti","aScramblerFunction","_ref$shouldTokenizeQu","shouldTokenizeQuestionMarks","_ref$shouldStripFullS","shouldStripFullStops","_ref$shouldUseExplici","shouldUseExplicitSeparators","Object","classCallCheck","this","shuffleArray","defaultScramblerFunction","aSentence","sanitizedInputString","sanitizeInput","split","words","tokenizeWords","maybeLowercaseWordsInArray","map","aPart","trim","array","i","j","Math","floor","random","_ref2","_this","aWord","index","maybeLowercaseAWord","countUppercaseLetters","shouldRetainCapitalisation","toLowerCase","aString","stringArray","Array","from","numUppercaseLetters","forEach","aChar","indexOf","inputString","sanitizedInput","replace","ScramblerOptions","optionName","event","props","optionsCallback","target","checked","react_default","a","createElement","FormControl_default","component","FormLabel_default","FormGroup_default","FormControlLabel_default","control","Checkbox_default","options","onChange","handleChange","value","disabled","label","Component","SentenceScrambler","possibleConstructorReturn","getPrototypeOf","call","state","outputString","canScramble","updateOutputString","bind","assertThisInitialized","onRescramble","canRescramble","onOptionsChanged","updatedInputString","updatedOutputString","scrambler","scrambleSentence","join","setState","endsWith","option","newOptions","TextField_default","id","InputLabelProps","shrink","placeholder","fullWidth","margin","IconButton_default","color","aria-label","className","button","onClick","Refresh_default","components_ScramblerOptions","withStyles","theme","spacing","unit","App","styles","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","classes","AppBar_default","position","Toolbar_default","Typography_default","variant","ExpansionPanel_default","defaultExpanded","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","components_SentenceScrambler","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5d016e77.chunk.js","sourcesContent":["export default class SentenceScramblerUtil {\n  constructor({\n    aScramblerFunction = null,\n    shouldTokenizeQuestionMarks = false,\n    shouldStripFullStops = false,\n    shouldUseExplicitSeparators = false\n  } = {}) {\n    if (aScramblerFunction) {\n      this.shuffleArray = aScramblerFunction;\n    } else {\n      this.shuffleArray = this.defaultScramblerFunction;\n    }\n\n    this.shouldTokenizeQuestionMarks = shouldTokenizeQuestionMarks;\n    this.shouldStripFullStops = shouldStripFullStops;\n    this.shouldUseExplicitSeparators = shouldUseExplicitSeparators;\n  }\n\n  canScramble(aSentence) {\n    let sanitizedInputString = this.sanitizeInput(aSentence);\n    let words = null;\n    if (this.shouldUseExplicitSeparators) {\n      words = sanitizedInputString.split(\"/\");\n    } else {\n      words = sanitizedInputString.split(\" \");\n    }\n    return words.length > 1;\n  }\n\n  scrambleSentence(aSentence) {\n    let words = this.tokenizeWords(aSentence);\n    words = this.maybeLowercaseWordsInArray(words);\n    this.shuffleArray(words);\n    return words;\n  }\n\n  tokenizeWords(aSentence) {\n    let sanitizedInputString = this.sanitizeInput(aSentence);\n    if (this.shouldUseExplicitSeparators) {\n      return sanitizedInputString.split(\"/\").map(aPart => aPart.trim());\n    } else {\n      return sanitizedInputString.split(\" \");\n    }\n  }\n\n  //from comments on https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array/25984542\n  defaultScramblerFunction(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]]; // eslint-disable-line no-param-reassign\n    }\n  }\n\n  maybeLowercaseWordsInArray(array) {\n    return array.map((aWord, index) => {\n      if (index === 0) {\n        return this.maybeLowercaseAWord(aWord);\n      } else {\n        return aWord;\n      }\n    });\n  }\n\n  maybeLowercaseAWord(aWord) {\n    if (aWord.length > 1) {\n      if (this.countUppercaseLetters(aWord) > 1) return aWord;\n      if (this.shouldRetainCapitalisation(aWord)) return aWord;\n      return aWord.toLowerCase();\n    } else if (aWord.length === 1 && aWord !== \"I\") {\n      return aWord.toLowerCase();\n    } else {\n      return aWord;\n    }\n  }\n\n  countUppercaseLetters(aString) {\n    const stringArray = Array.from(aString);\n    let numUppercaseLetters = 0;\n    stringArray.forEach(aChar => {\n      if (aChar.toLowerCase() !== aChar) {\n        numUppercaseLetters++;\n      }\n    });\n    return numUppercaseLetters;\n  }\n\n  shouldRetainCapitalisation(aString) {\n    const exceptions = [\"I\", \"Mr\", \"Mrs\", \"Mrs.\", \"Mr.\", \"Dr.\", \"Dr\", \"Doctor\"];\n    return exceptions.indexOf(aString) !== -1;\n  }\n\n  sanitizeInput(inputString) {\n    let sanitizedInput = inputString.trim();\n\n    if (this.shouldUseExplicitSeparators) {\n      return sanitizedInput;\n    }\n\n    if (this.shouldStripFullStops) {\n      sanitizedInput = sanitizedInput.replace(/\\.$/, \"\");\n    }\n    if (this.shouldTokenizeQuestionMarks) {\n      sanitizedInput = sanitizedInput.replace(/(\\w)(\\?)/, \"$1 ?\");\n    }\n    return sanitizedInput;\n  }\n}\n","import React, { Component } from \"react\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nclass ScramblerOptions extends Component {\n  handleChange(optionName) {\n    return event => {\n      this.props.optionsCallback(optionName, event.target.checked);\n    };\n  }\n\n  render() {\n    return (\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Options</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={this.props.options[\"shouldTokenizeQuestionMarks\"]}\n                onChange={this.handleChange(\"shouldTokenizeQuestionMarks\")}\n                value=\"shouldTokenizeQuestionMarks\"\n                disabled={this.props.options[\"shouldUseExplicitSeparators\"]}\n              />\n            }\n            label=\"Make question mark a separate word\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={this.props.options[\"shouldStripFullStops\"]}\n                onChange={this.handleChange(\"shouldStripFullStops\")}\n                value=\"shouldStripFullStops\"\n                disabled={this.props.options[\"shouldUseExplicitSeparators\"]}\n              />\n            }\n            label=\"Should Strip Full Stops\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={this.props.options[\"shouldUseExplicitSeparators\"]}\n                onChange={this.handleChange(\"shouldUseExplicitSeparators\")}\n                value=\"shouldUseExplicitSeparators\"\n              />\n            }\n            label=\"Should use &quot;/&quot; as Separator\"\n          />\n        </FormGroup>\n      </FormControl>\n    );\n  }\n}\n\nexport default ScramblerOptions;\n","import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SentenceScramblerUtil from \"../utils/SentenceScramblerUtil\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Refresh from \"@material-ui/icons/Refresh\";\nimport ScramblerOptions from \"./ScramblerOptions\";\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit\n  }\n});\n\nclass SentenceScrambler extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputString: null,\n      outputString: null,\n      canScramble: false,\n      options: {\n        shouldTokenizeQuestionMarks: false,\n        shouldStripFullStops: false,\n        shouldUseExplicitSeparators: false\n      }\n    };\n\n    this.updateOutputString = this.updateOutputString.bind(this);\n    this.onRescramble = this.onRescramble.bind(this);\n    this.canRescramble = this.canRescramble.bind(this);\n    this.optionsCallback = this.optionsCallback.bind(this);\n    this.onOptionsChanged = this.onOptionsChanged.bind(this);\n\n    this.onOptionsChanged();\n  }\n\n  updateOutputString(event) {\n    const updatedInputString = event.target.value;\n    let updatedOutputString = updatedInputString;\n    if (this.scrambler.canScramble(updatedInputString)) {\n      const scrambledWords = this.scrambler.scrambleSentence(\n        updatedInputString\n      );\n      updatedOutputString = scrambledWords.join(\" / \");\n    }\n    this.setState({\n      inputString: updatedInputString,\n      outputString: updatedOutputString\n    });\n  }\n\n  onRescramble() {\n    if (!this.state.inputString) return;\n\n    const scrambledWords = this.scrambler.scrambleSentence(\n      this.state.inputString\n    );\n    let updatedOutputString = scrambledWords.join(\" / \");\n    if (\n      this.state.inputString.endsWith(\".\") &&\n      this.state.options.shouldStripFullStops\n    ) {\n      updatedOutputString = updatedOutputString + \" .\";\n    }\n    this.setState({ outputString: updatedOutputString });\n  }\n\n  canRescramble() {\n    if (!this.state.inputString) return false;\n\n    return this.scrambler.canScramble(this.state.inputString);\n  }\n\n  optionsCallback(option, value) {\n    let newOptions = this.state.options;\n    newOptions[option] = value;\n    this.setState({ options: newOptions });\n    this.onOptionsChanged();\n    this.onRescramble();\n  }\n\n  onOptionsChanged() {\n    this.scrambler = new SentenceScramblerUtil(this.state.options);\n  }\n\n  render() {\n    return (\n      <div>\n        <TextField\n          id=\"sentenceInput\"\n          InputLabelProps={{\n            shrink: true\n          }}\n          placeholder=\"Write something here!\"\n          fullWidth\n          margin=\"normal\"\n          onChange={this.updateOutputString}\n        />\n        <div>\n          {this.state.outputString}\n          <IconButton\n            color=\"secondary\"\n            aria-label=\"Rescramble Sentence\"\n            className={this.props.button}\n            disabled={!this.canRescramble()}\n            onClick={this.onRescramble}\n          >\n            <Refresh />\n          </IconButton>\n        </div>\n        <ScramblerOptions\n          options={this.state.options}\n          optionsCallback={this.optionsCallback}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(SentenceScrambler);\n","import React, { Component } from \"react\";\n\nimport SentenceScrambler from \"./components/SentenceScrambler\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.classes = props;\n  }\n\n  styles = theme => ({\n    root: {\n      width: \"100%\"\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontWeight: theme.typography.fontWeightRegular\n    }\n  });\n\n  render() {\n    return (\n      <div>\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <Typography variant=\"title\" color=\"inherit\">\n              Worksheet Aids\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <ExpansionPanel defaultExpanded={true}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={this.classes.heading}>\n              Sentence Scrambler\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <SentenceScrambler />\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}